:~/.../de-lambda-deployment$ aws s3 mb s3://${CODE_BUCKET_NAME}
make_bucket: lambda-deployment-code-bucket
:~/.../de-lambda-deployment$ aws s3 mb s3://${DATA_BUCKET_NAME}
make_bucket: lambda-deployment-data-bucket
:~/.../de-lambda-deployment$ aws s3 ls
2023-02-01 11:48:42 lambda-deployment-code-bucket
2023-02-01 11:49:44 lambda-deployment-data-bucket
:~/.../de-lambda-deployment$ cd src
:~/.../src$ cd file_reader
:~/.../file_reader$ ls
__pycache__  reader.py
:~/.../file_reader$ zip ../../function.zip reader.py
  adding: reader.py (deflated 60%)
:~/.../file_reader$ cd .. 
:~/.../src$ cd .. 
:~/.../de-lambda-deployment$ ls
deployment  function.zip  Makefile  README.md  requirements.txt  src  test  venv
:~/.../de-lambda-deployment$ aws s3 cp function.zip s3://${CODE_BUCKET_NAME}/${FUNCTION_NAME}/function.zip
upload: ./function.zip to s3://lambda-deployment-code-bucket/s3-file-reader/function.zip
:~/.../de-lambda-deployment$ aws iam create-policy --policy-name s3-read-policy-${FUNCTION_NAME} --policy-document file://deployment/templates/s3_read_policy_template.json
{
    "Policy": {
        "PolicyName": "s3-read-policy-s3-file-reader",
        "PolicyId": "ANPA433OBQYSPIK5LBYJU",
        "Arn": "arn:aws:iam::884457178660:policy/s3-read-policy-s3-file-reader",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2023-02-01T12:10:49+00:00",
        "UpdateDate": "2023-02-01T12:10:49+00:00"
    }
}
:~/.../de-lambda-deployment$ S3_POLICY=arn:aws:iam::884457178660:policy/s3-read-policy-s3-file-reader
:~/.../de-lambda-deployment$ aws iam create-policy --policy-name cloudwatch_${FUNCTION_NAME} --policy-document file://deployment/templates/cloudwatch_log_policy_template.json

An error occurred (MalformedPolicyDocument) when calling the CreatePolicy operation: Resource Insert must be in ARN format or "*".
:~/.../de-lambda-deployment$ aws iam create-policy --policy-name cloudwatch_${FUNCTION_NAME} --policy-document file://deployment/templates/cloudwatch_log_policy_template.json
{
    "Policy": {
        "PolicyName": "cloudwatch_s3-file-reader",
        "PolicyId": "ANPA433OBQYSOOB43QJFX",
        "Arn": "arn:aws:iam::884457178660:policy/cloudwatch_s3-file-reader",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2023-02-01T13:57:59+00:00",
        "UpdateDate": "2023-02-01T13:57:59+00:00"
    }
}
:~/.../de-lambda-deployment$ CLOUDWATCH_POLICY=arn:aws:iam::884457178660:policy/cloudwatch_s3-file-reader
:~/.../de-lambda-deployment$ asw iam create-role --rolename lambda-execution-role-${FUNCTION_NAME} \ --assume-role-policy-docuent file://deployment/trust_policy.json
Command 'asw' not found, did you mean:
  command 'nsw' from snap nsw (0+git.b61ddec)
  command 'aws' from snap aws-cli (1.15.58)
  command 'ase' from deb ase (3.22.1-1ubuntu1)
  command 'lsw' from deb suckless-tools (46-1)
  command 'ash' from deb ash (0.5.11+git20210903+057cd650a4ed-3build1)
  command 'asc' from deb asc (2.6.1.0-8build1)
  command 'as' from deb binutils (2.38-4ubuntu2.1)
  command 'asy' from deb asymptote (2.78+ds-2)
  command 'ass' from deb irpas (0.10-9)
  command 'asp' from deb asp (1.8-8build1)
  command 'psw' from deb wise (2.4.1-23)
  command 'aws' from deb awscli (1.22.34-1)
  command 'yasw' from deb yasw (0.6-2build1)
See 'snap info <snapname>' for additional versions.
:~/.../de-lambda-deployment$ aws iam create-role --rolename lambda-execution-role-${FUNCTION_NAME} \ --assume-role-policy-docuent file://deployment/trust_policy.json

usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help

aws: error: the following arguments are required: --role-name, --assume-role-policy-document

:~/.../de-lambda-deployment$ aws iam create-role --role-name lambda-execution-role-${FUNCTION_NAME} \ --assume-role-policy-document file://deployment/trust_policy.json

usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help

aws: error: the following arguments are required: --assume-role-policy-document

:~/.../de-lambda-deployment$ aws iam create-role --role-name lambda-execution-role-${FUNCTION_NAME} \--assume-role-policy-document file://deployment/trust_policy.json
{
    "Role": {
        "Path": "/",
        "RoleName": "lambda-execution-role-s3-file-reader",
        "RoleId": "AROA433OBQYSNZGQKSMV3",
        "Arn": "arn:aws:iam::884457178660:role/lambda-execution-role-s3-file-reader",
        "CreateDate": "2023-02-01T14:06:54+00:00",
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "sts:AssumeRole"
                    ],
                    "Principal": {
                        "Service": [
                            "lambda.amazonaws.com"
                        ]
                    }
                }
            ]
        }
    }
}
:~/.../de-lambda-deployment$ EXECUTION_ROLE=arn:aws:iam::884457178660:role/lambda-execution-role-s3-file-reader
:~/.../de-lambda-deployment$ aws iam attach-role-policy --policy-arn ${S3_POLICY} --role-name lambda-execution-role-${FUNCTION_NAME}
:~/.../de-lambda-deployment$ aws iam attach-role-policy --policy-arn ${CLOUDWATCH_POLICY} --role-name lambda-execution-role-${FUNCTION_NAME}
:~/.../de-lambda-deployment$ aws lambda create-function --function-name ${FUNCTION_NAME} --runtime python3.9 \
--role ${EXECUTION_ROLE} --package-type Zip --handler reader.lambda_handler \
--code S3Bucket=${CODE_BUCKET_NAME},S3Key=${FUNCTION_NAME}/function.zip
{
    "FunctionName": "s3-file-reader",
    "FunctionArn": "arn:aws:lambda:us-east-1:884457178660:function:s3-file-reader",
    "Runtime": "python3.9",
    "Role": "arn:aws:iam::884457178660:role/lambda-execution-role-s3-file-reader",
    "Handler": "reader.lambda_handler",
    "CodeSize": 1174,
    "Description": "",
    "Timeout": 3,
    "MemorySize": 128,
    "LastModified": "2023-02-01T14:19:52.930+0000",
    "CodeSha256": "2ucLaE00+DNFuSEka9hWQ8VRWh/jUVVNP3A2VefwNpQ=",
    "Version": "$LATEST",
    "TracingConfig": {
        "Mode": "PassThrough"
    },
    "RevisionId": "11369f86-b418-476e-bf2c-d199ffeb1853",
    "State": "Pending",
    "StateReason": "The function is being created.",
    "StateReasonCode": "Creating",
    "PackageType": "Zip",
    "Architectures": [
        "x86_64"
    ],
    "EphemeralStorage": {
        "Size": 512
    },
    "SnapStart": {
set mark: ...skipping...
{
    "FunctionName": "s3-file-reader",
    "FunctionArn": "arn:aws:lambda:us-east-1:884457178660:function:s3-file-reader",
    "Runtime": "python3.9",
    "Role": "arn:aws:iam::884457178660:role/lambda-execution-role-s3-file-reader",
    "Handler": "reader.lambda_handler",
    "CodeSize": 1174,
    "Description": "",
    "Timeout": 3,
    "MemorySize": 128,
    "LastModified": "2023-02-01T14:19:52.930+0000",
    "CodeSha256": "2ucLaE00+DNFuSEka9hWQ8VRWh/jUVVNP3A2VefwNpQ=",
    "Version": "$LATEST",
    "TracingConfig": {
        "Mode": "PassThrough"
    },
    "RevisionId": "11369f86-b418-476e-bf2c-d199ffeb1853",
    "State": "Pending",
    "StateReason": "The function is being created.",
    "StateReasonCode": "Creating",
    "PackageType": "Zip",
    "Architectures": [
        "x86_64"
    ],
    "EphemeralStorage": {
        "Size": 512
    },
    "SnapStart": {
:~/.../de-lambda-deployment$ LAMBDA_ARN=arn:aws:lambda:us-east-1:884457178660:function:s3-file-reader
:~/.../de-lambda-deployment$ aws lambda add-permission --function-name ${FUNCTION_NAME} --principal s3.amazonaws.com \
--statement-id s3invoke --action "lambda:InvokeFunction" --source-arn arn:aws:s3:::${DATA_BUCKET_NAME} --source-account ${AWS_ACCOUNT}
{
    "Statement": "{\"Sid\":\"s3invoke\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"s3.amazonaws.com\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-1:884457178660:function:s3-file-reader\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"884457178660\"},\"ArnLike\":{\"AWS:SourceArn\":\"arn:aws:s3:::lambda-deployment-data-bucket\"}}}"
}
:~/.../de-lambda-deployment$ aws s3api put-bucket-notification-configuration --bucket ${DATA_BUCKET_NAME} --notification-configuration file://deployment/s3_event_config.json

Error parsing parameter '--notification-configuration': Unable to load paramfile file://deployment/s3_event_config.json: [Errno 2] No such file or directory: 'deployment/s3_event_config.json'
:~/.../de-lambda-deployment$ aws s3api put-bucket-notification-configuration --bucket ${DATA_BUCKET_NAME} --notification-configuration file://deployment/templates/s3_event_config.json

Error parsing parameter '--notification-configuration': Unable to load paramfile file://deployment/templates/s3_event_config.json: [Errno 2] No such file or directory: 'deployment/templates/s3_event_config.json'
:~/.../de-lambda-deployment$ aws s3api put-bucket-notification-configuration --bucket ${DATA_BUCKET_NAME} --notification-configuration file://deployment/templates/s3_event_config_template.json

An error occurred (InvalidArgument) when calling the PutBucketNotificationConfiguration operation: The ARN is not well formed
:~/.../de-lambda-deployment$ aws s3api put-bucket-notification-configuration --bucket ${DATA_BUCKET_NAME} --notification-configuration file://deployment/templates/s3_event_config_template.json
:~/.../de-lambda-deployment$ ls
deployment  function.zip  Makefile  README.md  requirements.txt  src  test  venv  zen.txt
:~/.../de-lambda-deployment$ aws s3 cp zen.txt s3://${DATA_BUCKET_NAME}/zen.txt
upload: ./zen.txt to s3://lambda-deployment-data-bucket/zen.txt     
:~/.../de-lambda-deployment$ aws logs tail /aws/lambda/${FUNCTION_NAME} --region us-east-1
2023-02-01T15:02:47.815000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 INIT_START Runtime Version: python:3.9.v16   Runtime Version ARN: arn:aws:lambda:us-east-1::runtime:07a48df201798d627f2b950f03bb227aab4a655a1d019c3296406f95937e2525
2023-02-01T15:02:48.056000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 START RequestId: 03c155be-7471-4ef1-a4af-a4cf42134069 Version: $LATEST
2023-02-01T15:02:48.056000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 [INFO]       2023-02-01T15:02:48.056Z        03c155be-7471-4ef1-a4af-a4cf42134069    Bucket is lambda-deployment-data-bucket
2023-02-01T15:02:48.056000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 [INFO]       2023-02-01T15:02:48.056Z        03c155be-7471-4ef1-a4af-a4cf42134069    Object key is zen.txt
2023-02-01T15:02:49.714000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 [ERROR] ClientError: An error occurred (AccessDenied) when calling the GetObject operation: Access Denied
Traceback (most recent call last):
  File "/var/task/reader.py", line 39, in lambda_handler
    text = get_text_from_file(s3, s3_bucket_name, s3_object_name)
  File "/var/task/reader.py", line 68, in get_text_from_file
    data = client.get_object(Bucket=bucket, Key=object_key)
  File "/var/runtime/botocore/client.py", line 391, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File "/var/runtime/botocore/client.py", line 719, in _make_api_call
    raise error_class(parsed_response, operation_name)
2023-02-01T15:02:49.734000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 END RequestId: 03c155be-7471-4ef1-a4af-a4cf42134069
2023-02-01T15:02:49.734000+00:00 2023/02/01/[$LATEST]dc41d16b2e86485cb5141c8803344265 REPORT RequestId: 03c155be-7471-4ef1-a4af-a4cf42134069       Duration: 1678.68 ms    Billed Duration: 1679 msMemory Size: 128 MB     Max Memory Used: 70 MB  Init Duration: 240.32 ms
:~/.../de-lambda-deployment$ 